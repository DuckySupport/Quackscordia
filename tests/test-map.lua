local Map = require('../libs/utils/Map')
local utils = require('./utils')

local assertEqual = utils.assertEqual

local map = Map()

map:set('cat', {name = 'cat', sound = 'meow', color = 'black'})
do
	local keys = map:getKeys()
	local values = map:getValues()
	local entries = map:getEntries()
	assertEqual(values[1].name, 'cat')
	assertEqual(values[2], nil)
	assertEqual(keys[1], 'cat')
	assertEqual(keys[2], nil)
	assertEqual(keys[1], entries[1][1])
	assertEqual(#map, 1)
end

map:set('dog', {name = 'dog', sound = 'woof', color = 'white'})
do
	local keys = map:getKeys()
	local values = map:getValues()
	local entries = map:getEntries()
	assertEqual(values[1].name, 'cat')
	assertEqual(values[2].name, 'dog')
	assertEqual(values[3], nil)
	assertEqual(keys[1], 'cat')
	assertEqual(keys[2], 'dog')
	assertEqual(keys[3], nil)
	assertEqual(keys[1], entries[1][1])
	assertEqual(keys[2], entries[2][1])
	assertEqual(values[1], entries[1][2])
	assertEqual(values[2], entries[2][2])
	assertEqual(#map, 2)
end

map:set('cow', {name = 'cow', sound = 'moo', color = 'black'})
do
	local keys = map:getKeys()
	local values = map:getValues()
	local entries = map:getEntries()
	assertEqual(values[1].name, 'cat')
	assertEqual(values[2].name, 'dog')
	assertEqual(values[3].name, 'cow')
	assertEqual(values[4], nil)
	assertEqual(keys[1], 'cat')
	assertEqual(keys[2], 'dog')
	assertEqual(keys[3], 'cow')
	assertEqual(keys[4], nil)
	assertEqual(keys[1], entries[1][1])
	assertEqual(keys[2], entries[2][1])
	assertEqual(keys[3], entries[3][1])
	assertEqual(values[1], entries[1][2])
	assertEqual(values[2], entries[2][2])
	assertEqual(values[3], entries[3][2])
	assertEqual(#map, 3)
end

assertEqual(map:get('dog').sound, 'woof')
map:set('dog', {name = 'dog', sound = 'bark', color = 'white'})
assertEqual(map:get('dog').sound, 'bark')
do
	local keys = map:getKeys()
	local values = map:getValues()
	local entries = map:getEntries()
	assertEqual(values[1].name, 'cat')
	assertEqual(values[2].name, 'dog')
	assertEqual(values[3].name, 'cow')
	assertEqual(values[4], nil)
	assertEqual(keys[1], 'cat')
	assertEqual(keys[2], 'dog')
	assertEqual(keys[3], 'cow')
	assertEqual(keys[4], nil)
	assertEqual(keys[1], entries[1][1])
	assertEqual(keys[2], entries[2][1])
	assertEqual(keys[3], entries[3][1])
	assertEqual(values[1], entries[1][2])
	assertEqual(values[2], entries[2][2])
	assertEqual(values[3], entries[3][2])
	assertEqual(#map, 3)
end

map:delete('dog')
do
	local keys = map:getKeys()
	local values = map:getValues()
	local entries = map:getEntries()
	assertEqual(values[1].name, 'cat')
	assertEqual(values[2].name, 'cow')
	assertEqual(values[3], nil)
	assertEqual(keys[1], 'cat')
	assertEqual(keys[2], 'cow')
	assertEqual(keys[3], nil)
	assertEqual(keys[1], entries[1][1])
	assertEqual(keys[2], entries[2][1])
	assertEqual(values[1], entries[1][2])
	assertEqual(values[2], entries[2][2])
	assertEqual(#map, 2)
end

map:set('dog', {name = 'dog', sound = 'bark', color = 'white'})
do
	local keys = map:getKeys()
	local values = map:getValues()
	local entries = map:getEntries()
	assertEqual(values[1].name, 'cat')
	assertEqual(values[2].name, 'cow')
	assertEqual(values[3].name, 'dog')
	assertEqual(values[4], nil)
	assertEqual(keys[1], 'cat')
	assertEqual(keys[2], 'cow')
	assertEqual(keys[3], 'dog')
	assertEqual(keys[4], nil)
	assertEqual(keys[1], entries[1][1])
	assertEqual(keys[2], entries[2][1])
	assertEqual(keys[3], entries[3][1])
	assertEqual(values[1], entries[1][2])
	assertEqual(values[2], entries[2][2])
	assertEqual(values[3], entries[3][2])
	assertEqual(#map, 3)
end

